[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Groundwater and Stream Temperature",
    "section": "",
    "text": "1 Introduction\nThis book provides a visual story of…\nOur goals are to…\nAccess the GitHub repo here: https://github.com/j-baldock/PASTA-groundwater\nThis information is preliminary or provisional and is subject to revision. It is being provided to meet the need for timely best science. The information has not received final approval by the U.S. Geological Survey (USGS) and is provided on the condition that neither the USGS nor the U.S. Government shall be held liable for any damages resulting from the authorized or unauthorized use of the information.\nProject team: Jeff Baldock, Tim Lambert, Jeff Walker, & Jenn Fair.\n\n\nSession Information\n\n\n\n\n\nCode\nsessionInfo()\n\n\nR version 4.4.3 (2025-02-28 ucrt)\nPlatform: x86_64-w64-mingw32/x64\nRunning under: Windows 11 x64 (build 22631)\n\nMatrix products: default\n\n\nlocale:\n[1] LC_COLLATE=English_United States.utf8 \n[2] LC_CTYPE=English_United States.utf8   \n[3] LC_MONETARY=English_United States.utf8\n[4] LC_NUMERIC=C                          \n[5] LC_TIME=English_United States.utf8    \n\ntime zone: America/Denver\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.4.3    fastmap_1.2.0     cli_3.6.3        \n [5] tools_4.4.3       htmltools_0.5.8.1 rstudioapi_0.17.1 rmarkdown_2.29   \n [9] knitr_1.48        jsonlite_1.8.9    xfun_0.49         digest_0.6.37    \n[13] rlang_1.1.4       evaluate_1.0.1",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "exploredata.html",
    "href": "exploredata.html",
    "title": "2  Explore Data",
    "section": "",
    "text": "2.1 Data\nSite information\nCode\nsiteinfo &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/EcoDrought_SiteInformation.csv\")\nsiteinfo_sp &lt;- st_as_sf(siteinfo, coords = c(\"long\", \"lat\"), crs = 4326)\nLittle g’s\nCode\ndat_clean &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/LittleG_data_clean.csv\")\nBig G’s\nCode\ndat_clean_big &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Qualitative/BigG_data_clean.csv\")\nWatersheds (filter to Snake River only)\nCode\nsheds_list &lt;- list()\nmyfiles &lt;- list.files(path = \"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/\", pattern = \".shp\")\nfor (i in 1:length(myfiles)) {\n  sheds_list[[i]] &lt;- st_read(paste(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Watersheds/\", myfiles[i], sep = \"\"))\n}\nsheds &lt;- do.call(rbind, sheds_list) %&gt;% \n  mutate(site_id = ifelse(site_id == \"SP01\", \"SP07\", ifelse(site_id == \"SP07\", \"SP01\", site_id))) %&gt;%\n  left_join(siteinfo) %&gt;%\n  filter(basin == \"Snake River\")\n\nsheds &lt;- vect(st_transform(sheds, crs = crs(siteinfo_sp)))\n#mapview(sheds %&gt;% arrange(desc(area_sqmi)), alpha.regions = 0.2)\nSpring prevalence (Snake only)\nCode\nspringprev &lt;- rast(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Snake Groundwater/SpringPrev_UpperSnake_BedSurf_nolakes_flowbuff100.tif\")\n#plot(springprev)\nDiel PASTA derived parameters (for EcoDrought sites) - summarize as July-September site-specific means:\nCode\npasta &lt;- read_csv(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Covariates/pasta_derived_parameters_daily.csv\") %&gt;%\n  mutate(Month = month(date)) %&gt;%\n  rename(CalendarYear = year) %&gt;%\n  filter(Month %in% c(7:9)) %&gt;%\n  group_by(site_name, CalendarYear) %&gt;%\n  summarize(meanRatio = mean(meanRatio, na.rm = TRUE),\n            phaseLag = mean(phaseLag, na.rm = TRUE),\n            amplitudeRatio = mean(amplitudeRatio, na.rm = TRUE)) %&gt;%\n  ungroup()\npasta\n\n\n# A tibble: 432 × 5\n   site_name      CalendarYear meanRatio phaseLag amplitudeRatio\n   &lt;chr&gt;                 &lt;dbl&gt;     &lt;dbl&gt;    &lt;dbl&gt;          &lt;dbl&gt;\n 1 Avery Brook            2020     0.886     1.48          0.230\n 2 Avery Brook            2021     0.904     2.89          0.290\n 3 Avery Brook            2022     0.876     1.68          0.208\n 4 Avery Brook            2023     0.903     3.21          0.332\n 5 Avery Brook            2024     0.855     2.26          0.243\n 6 BigCreekLower          2017     1.29      1.81          0.396\n 7 BigCreekLower          2018     0.826     2.43          0.313\n 8 BigCreekLower          2019     1.06      2.45          0.383\n 9 BigCreekLower          2020     0.868     1.85          0.428\n10 BigCreekMiddle         2018     0.933     1.20          0.338\n# ℹ 422 more rows",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Explore Data</span>"
    ]
  },
  {
    "objectID": "exploredata.html#flow-by-pasta",
    "href": "exploredata.html#flow-by-pasta",
    "title": "2  Explore Data",
    "section": "2.2 Flow by PASTA",
    "text": "2.2 Flow by PASTA\nCreate plotting function\n\n\nCode\nmdaystib &lt;- tibble(Month = c(1:12), mdays = c(31,28,31,30,31,30,31,31,30,31,30,31))\n\ngwflowfun &lt;- function (subbas, years, dropsites, months = c(7:9)) {\n  dat_clean %&gt;% \n  filter(subbasin == subbas, CalendarYear %in% years, Month %in% months) %&gt;%\n  group_by(site_name, subbasin, designation, CalendarYear) %&gt;% #, Month, MonthName) %&gt;%\n  summarise(ss = n(),\n            logYield = mean(logYield, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  #left_join(mdaystib) %&gt;%\n  mutate(pdays = ss/92#,\n         #YearMonth = paste(CalendarYear, \"_\", Month, sep = \"\")\n         ) %&gt;%\n  filter(pdays &gt; 0.9,\n         !site_name %in% dropsites) %&gt;%\n  group_by(CalendarYear) %&gt;%\n  #mutate(z_logYield = scale(logYield, center = TRUE, scale = TRUE)[,1]) %&gt;%\n  ungroup() %&gt;%\n  left_join(pasta) %&gt;%\n  ggplot(aes(x = amplitudeRatio, y = logYield)) +\n  geom_abline(intercept = 0, slope = 0, linetype = 2) +\n  geom_smooth(method = \"lm\", color = \"black\") +\n  geom_point(aes(color = site_name)) +\n  facet_wrap(~CalendarYear, nrow = 1) +\n  #facet_wrap2(~CalendarYear, nrow = 1, ncol = 5, trim_blank = FALSE) +\n  #facet_grid(cols = vars(Month), rows = vars(CalendarYear)) + \n  theme_bw() + theme(panel.grid.major = element_blank(), panel.grid.minor = element_blank()) \n}\n\n\nGet unique basins\n\n\nCode\nunique(dat_clean$basin)\n\n\n[1] \"West Brook\"     \"Paine Run\"      \"Staunton River\" \"Flathead\"      \n[5] \"Snake River\"    \"Shields River\"  \"Donner Blitzen\"\n\n\nPlot the relationship between annual summer mean discharge and amplitude ratio from PASTA, where lower amplitude ratio values are indicative of greater groundwater availability. Mean flow for each site is standardized by year to remove interannual variation in climate/regional water availability\n\nWest BrookStaunton RiverSnake RiverShields River\n\n\n\n\nCode\ngwflowfun(subbas = \"West Brook\", dropsites = c(\"Mitchell Brook\"), years = c(2020:2024))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ngwflowfun(subbas = \"Staunton River\", dropsites = NA, years = c(2019:2021))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ngwflowfun(subbas = \"Snake River\", dropsites = NA, years = c(2018, 2020:2022), months = c(7:9))\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ngwflowfun(subbas = \"Shields River\", dropsites = NA, years = c(2017,2019,2020,2022,2023), months = c(7:9))",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Explore Data</span>"
    ]
  },
  {
    "objectID": "exploredata.html#flow-by-gwi",
    "href": "exploredata.html#flow-by-gwi",
    "title": "2  Explore Data",
    "section": "2.3 Flow by GWI",
    "text": "2.3 Flow by GWI\n\n2.3.1 Visualize GW metrics\nLoad spatially explicity groundwater indices for the entire Snake River basin\n\n\nCode\nspringprev_cont &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/Data/Snake Groundwater/GroundwaterMetrics_Normalized_PredPoints.shp\")\n\n\nPlot groundwater spring prevalence across upper Snake River basin, springprev_point: spring prevalence value (10mx10m cell) every 300 m along the entire spring network (too large to plot interactive maps in Quarto)\n\n\nCode\nmapview(st_as_sf(springprev_cont), zcol = \"springpre0\", col.regions = colorRampPalette(rev(magma(12))), alpha.regions = 1)\n\n\nPlot inverse distance weighted (5 km decay) groundwater index across upper Snake River basin, springprev_iew05km: mean spring prevalence within contributing catchment, inverse distance weighted with 5 km decay, every 300 m along the entire spring network (too large to plot interactive maps in Quarto)\n\n\nCode\nmapview(st_as_sf(springprev_cont), zcol = \"springpre3\", col.regions = colorRampPalette(rev(viridis(12))), alpha.regions = 1)\n\n\nPlot groundwater metrics across the Spread Creek sub-basin\n\n\nCode\nsheds &lt;- terra::project(sheds, crs(springprev_cont))\n\nspringprev_cont_snake &lt;- mask(crop(springprev_cont, sheds[sheds$site_name == \"Spread Creek Dam\",]), sheds[sheds$site_name == \"Spread Creek Dam\",])\n\nmynet &lt;- vect(\"C:/Users/jbaldock/OneDrive - DOI/Documents/USGS/EcoDrought/EcoDrought Working/EcoDrought-Analysis/Watershed Delineation/Streams/Snake_Streams.shp\")\ncrs(mynet) &lt;- crs(siteinfo_sp)\nmynet &lt;- terra::project(mynet, crs(sheds))\nmynet &lt;- crop(mynet, sheds[sheds$site_name == \"Spread Creek Dam\",])\n\n# convert to SpatVectors\nsites_flow &lt;- vect(siteinfo_sp %&gt;% filter(basin == \"Snake River\"))\n# sheds &lt;- vect(sheds)\n\n# transform\nsites_flow &lt;- terra::project(sites_flow, crs(springprev))\nsheds &lt;- terra::project(sheds, crs(springprev))\n\n\nPoint-wise spring prevalence\n\n\nCode\nggplot() +\n  geom_sf(data = st_as_sf(sheds[sheds$site_name == \"Spread Creek Dam\",]), color = \"black\", fill = \"white\", linewidth = 0.4) + \n  geom_sf(data = st_as_sf(mynet), color = \"white\", linewidth = 1, lineend = \"round\") +\n  geom_sf(data = st_as_sf(mynet), color = \"royalblue4\", linewidth = 0.6, lineend = \"round\") +\n  geom_sf(data = st_as_sf(springprev_cont_snake), aes(colour = springpre0), size = 2) +\n  scale_colour_viridis(option = \"A\", direction = -1, limits = range(springprev_cont_snake$springpre0), na.value = \"grey\") +\n  geom_sf(data = st_as_sf(sites_flow) %&gt;% filter(designation != \"big\"), shape = 21, fill = \"white\", size = 2) +\n  labs(colour = \"Spring\\nprevalence\\n(point)\") + #annotation_scale() +\n  theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text = element_blank()) \n\n\n\n\n\n\n\n\n\nGroundwater index (IEW-5km)\n\n\nCode\nggplot() +\n  geom_sf(data = st_as_sf(sheds[sheds$site_name == \"Spread Creek Dam\",]), color = \"black\", fill = \"white\", linewidth = 0.4) + \n  geom_sf(data = st_as_sf(mynet), color = \"white\", linewidth = 1, lineend = \"round\") +\n  geom_sf(data = st_as_sf(mynet), color = \"royalblue4\", linewidth = 0.6, lineend = \"round\") +\n  geom_sf(data = st_as_sf(springprev_cont_snake), aes(colour = springpre3), size = 2) +\n  scale_colour_viridis(option = \"D\", direction = -1, limits = range(springprev_cont_snake$springpre3), na.value = \"grey\") +\n  geom_sf(data = st_as_sf(sites_flow) %&gt;% filter(designation != \"big\"), shape = 21, fill = \"white\", size = 2) +\n  labs(colour = \"GW index\\n(IEW-5km)\") + #annotation_scale() +\n  theme_bw() + theme(axis.title.x = element_blank(), axis.title.y = element_blank(), axis.text = element_blank()) \n\n\n\n\n\n\n\n\n\n\n\n2.3.2 Get GWI for EcoD sites\nExtract groundwater metrics from MaxEnt spring prevalence model, for the EcoDrought sites\n\n\nCode\n# extract average and weighted spring prevalence for each basin\nsites &lt;- sheds$site_name\ngwlist &lt;- list()\nst &lt;- Sys.time()\nfor (i in 1:length(sites)) {\n  spring_mask &lt;- mask(crop(springprev, sheds[sheds$site_name == sites[i],]), sheds[sheds$site_name == sites[i],]) # crop and mask by basin\n  dist_rast &lt;- distance(spring_mask, sites_flow[sites_flow$site_name == sites[i],]) %&gt;% mask(spring_mask) # calculate distance between each raster cell and site location\n  gwlist[[i]] &lt;- tibble(site_name = sites[i],\n                        area_sqmi = sites_flow$area_sqmi[i],\n                        springprev_point = terra::extract(springprev, sites_flow[sites_flow$site_name == sites[i],], na.rm = TRUE)[,2],\n                        springprev_basinmean = as.numeric(global(spring_mask, \"mean\", na.rm = T)), # extract(spring_buff, sheds_yoy[sheds_yoy$site == sites[i],], fun = mean, na.rm = TRUE)[,2],\n                        springprev_iew01km = as.numeric(global(spring_mask * (1 / exp(dist_rast/1000)), \"sum\", na.rm = T) / global(1 / exp(dist_rast/1000), \"sum\", na.rm = T)),\n                        springprev_iew05km = as.numeric(global(spring_mask * (1 / exp(dist_rast/5000)), \"sum\", na.rm = T) / global(1 / exp(dist_rast/5000), \"sum\", na.rm = T))\n                        )\n  print(i)\n}\nSys.time() - st\ngwmetrics_snake &lt;- do.call(rbind, gwlist) # bind as tibble\n\n\nView groundwater metrics for the EcoDrought sites:\n\nspringprev_point: spring prevalence value at the monitoring location (10mx10m cell)\nspringprev_basinmean: mean spring prevalence within the contributing catchment\nspringprev_iew01km: mean spring prevalence within contributing catchment, inverse distance weighted with 1 km decay\nspringprev_iew05km: mean spring prevalence within contributing catchment, inverse distance weighted with 5 km decay\n\n\n\nCode\ndatatable(gwmetrics_snake %&gt;% mutate(across(where(is.numeric), ~ round(., 3))))\n\n\n\n\n\n\n\n\n2.3.3 Flow by GWI\nPlot relationship between groundwater availability and mean summer log(specific discharge).\n\n\nCode\ndat_summer &lt;- dat_clean %&gt;% \n  filter(basin == \"Snake River\", Month %in% c(7:9)) %&gt;%\n  group_by(site_name, basin, designation, WaterYear) %&gt;% #, Month, MonthName) %&gt;%\n  summarise(ndays = n(),\n            logYield_mean = mean(logYield, na.rm = TRUE),\n            logYield_min = min(logYield, na.rm = TRUE)) %&gt;%\n  ungroup() %&gt;%\n  mutate(pdays = ndays/92) %&gt;%\n  filter(pdays &gt; 0.9) %&gt;%\n  left_join(gwmetrics_snake) #%&gt;%\n  #left_join(wateravail %&gt;% filter(basin == \"Snake River\") %&gt;% select(WaterYear, totalyield_sum, totalyield_sum_z))\n\n#summary(lm(logYield_mean ~ springprev_iew05km*totalyield_sum, data = dat_summer))\n\ndat_summer %&gt;%\n  #filter(site_name != \"Grizzly Creek\") %&gt;%\n  #filter(WaterYear %in% c(2020:2023)) %&gt;%\n  ggplot(aes(x = springprev_iew05km, y = logYield_mean)) +\n  geom_smooth(method = \"lm\", aes(x = springprev_iew05km, y = logYield_mean), se = FALSE, color = \"grey50\") + \n  geom_point(aes(color = site_name)) + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Groundwater index (IEW-5km)\") + ylab(\"Mean summer log(specific discharge)\") +\n  facet_wrap(~WaterYear)\n\n\n\n\n\n\n\n\n\nCode\ndat_summer %&gt;%\n  filter(WaterYear %in% c(2020:2023)) %&gt;%\n  ggplot(aes(x = springprev_iew05km, y = logYield_mean)) +\n  geom_smooth(method = \"lm\", aes(x = springprev_iew05km, y = logYield_mean), se = FALSE, color = \"grey50\") + \n  geom_point(aes(color = site_name, shape = factor(WaterYear))) + \n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Groundwater index (IEW-5km)\") + ylab(\"Mean summer log(specific discharge)\")\n\n\n\n\n\n\n\n\n\nWith the exception of Grizzly Creek, there is a surprisingly tight relationship between the groundwater index and summer streamflow: higher water availability (specific discharge) in reaches with high groundwater availability. Not surprising, but it’s a very nice validation of the MaxEnt approach to estimating groundwater availability and links to summer habitat conditions (e.g., drought refugia).\nGrizzly is the exception: high groundwater index despite very low flows. I’ve never been there, so I’m wondering what Robert makes of this. One thought I had is that where discharge is measured may be out on an alluvial fan, which may be in a losing reach as water spread outs into more porous material. We built the groundwater model to estimate the prevalence of springs, not where water is lost to the subsurface. So the groundwater index would not reflect these more nuanced dynamics. Alternatively (or additionally), looking at satellite imagery, there is a large beaver complex just upstream of the discharge monitoring site…which may reduce surface flows immediately downstream as shallow sediments are recharged. Scanning satellite imagery, it is pretty clear where springs discharge in the headwaters of Grizzly Creek. So, the MaxEnt model may not necessarily be wrong, but it doesn’t account for other factors which have important effects on streamflow at even finer spatial scales.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Explore Data</span>"
    ]
  },
  {
    "objectID": "exploredata.html#pasta-by-gwi",
    "href": "exploredata.html#pasta-by-gwi",
    "title": "2  Explore Data",
    "section": "2.4 PASTA by GWI",
    "text": "2.4 PASTA by GWI\n\n2.4.1 Groundwater index\n\nAmplitude ratioPhase lagMean ratio\n\n\n\n\nCode\npasta %&gt;% left_join(gwmetrics_snake) %&gt;% \n  filter(!is.na(springprev_point), CalendarYear %in% c(2013:2023)) %&gt;%\n  ggplot(aes(x = springprev_iew05km, y = amplitudeRatio)) +\n  geom_point(aes(color = site_name)) +\n  facet_wrap(~CalendarYear) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Groundwater index (IEW-5km)\") + ylab(\"Amplitude ratio\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npasta %&gt;% left_join(gwmetrics_snake) %&gt;% \n  filter(!is.na(springprev_point), CalendarYear %in% c(2013:2023)) %&gt;%\n  ggplot(aes(x = springprev_iew05km, y = phaseLag)) +\n  geom_point(aes(color = site_name)) +\n  facet_wrap(~CalendarYear) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Groundwater index (IEW-5km)\") + ylab(\"Phase lag\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npasta %&gt;% left_join(gwmetrics_snake) %&gt;% \n  filter(!is.na(springprev_point), CalendarYear %in% c(2013:2023)) %&gt;%\n  ggplot(aes(x = springprev_iew05km, y = meanRatio)) +\n  geom_point(aes(color = site_name)) +\n  facet_wrap(~CalendarYear) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Groundwater index (IEW-5km)\") + ylab(\"Mean ratio\")\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4.2 Spring prevalence\n\nAmplitude ratioPhase lagMean ratio\n\n\n\n\nCode\npasta %&gt;% left_join(gwmetrics_snake) %&gt;% \n  filter(!is.na(springprev_point), CalendarYear %in% c(2013:2023)) %&gt;%\n  ggplot(aes(x = springprev_point, y = amplitudeRatio)) +\n  geom_point(aes(color = site_name)) +\n  facet_wrap(~CalendarYear) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Spring prevalence\") + ylab(\"Amplitude ratio\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npasta %&gt;% left_join(gwmetrics_snake) %&gt;% \n  filter(!is.na(springprev_point), CalendarYear %in% c(2013:2023)) %&gt;%\n  ggplot(aes(x = springprev_point, y = phaseLag)) +\n  geom_point(aes(color = site_name)) +\n  facet_wrap(~CalendarYear) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Spring prevalence\") + ylab(\"Phase lag\")\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\npasta %&gt;% left_join(gwmetrics_snake) %&gt;% \n  filter(!is.na(springprev_point), CalendarYear %in% c(2013:2023)) %&gt;%\n  ggplot(aes(x = springprev_point, y = meanRatio)) +\n  geom_point(aes(color = site_name)) +\n  facet_wrap(~CalendarYear) +\n  theme_bw() + theme(panel.grid = element_blank()) +\n  xlab(\"Spring prevalence\") + ylab(\"Mean ratio\")",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Explore Data</span>"
    ]
  }
]